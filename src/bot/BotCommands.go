package bot

import (
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func commands(text *LanguagePackageOfMessages, update *tgbotapi.Update) (isCommand bool) {

	// –ù–∞–∂–∞—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏—à–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if len(update.Message.Text) > 6 {
		switch update.Message.Text[:4] {
		// –ö–µ–π—Å —Å –ø—Ä–æ–±–µ–ª–æ–º, —Ç.–∫. —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö —É —ç–º–æ–¥–∂–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
		case "‚úÖ ":
			// –ù–∞–∂–∞—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
			isCommand = clickSelectedContext(text, update.Message)
			return
		case "üí¨":
			// –ù–∞–∂–∞—Ç –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
			isCommand = clickContext(text, update.Message)
			return
		}
	}

	isCommand = update.Message.IsCommand()

	if !isCommand {
		return
	}

	switch update.Message.Command() {

	// –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
	case "start":
		// todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å

	// –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	case "without_context":
		commandWithoutContext(update.Message)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
	case "new":
		commandNewContext(text, update.Message)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
	case "show_all_contexts":
		showMenuContexts(update.Message)

	// –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
	case "hide_contexts":
		hideMenuContexts(update.Message)

	// –ö–æ–Ω–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
	case "adduser":
		commandAddUser(update.Message)

	case "showreg":
		commandShowReg(update.Message)

	case "rmuser":
		// todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		commandRmUser(update)

	case "showmsgs":
		// todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
		commandShowMsgs(update)
	}

	return isCommand
}

func commandNewContext(text *LanguagePackageOfMessages, message *tgbotapi.Message) {
	contextName := message.CommandArguments()

	if contextName == "" {
		setExpectedMessageTypeForUser(2, &message.From.ID)
		quickSendTextMessage(message.Chat.ID, text.msg("EnterContextName"))
		return
	} else if len([]rune(contextName)) < 2 {
		// todo –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
		quickSendTextMessage(message.Chat.ID, "–ò–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤")
		return
	}

	createNewContextAndSelect(contextName, message)
}

func commandWithoutContext(message *tgbotapi.Message) {
	// todo –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
	if withoutContext(&message.From.ID) {
		quickSendTextMessage(message.Chat.ID, "–¢–µ–ø–µ—Ä—å –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
	} else {
		quickSendTextMessage(message.Chat.ID, "–û—à–∏–±–∫–∞")
	}
	deleteThisMessage(message)
}

func commandAddUser(message *tgbotapi.Message) {

	if !userIsAdmin(message.From) {
		return
	}

	arg := strings.Split(message.CommandArguments(), "@")

	if len(arg) != 2 {
		quickSendTextMessage(message.Chat.ID, "error: nick@username")
		return
	}

	nick, username := arg[0], arg[1]

	addWaitingUser(&message.From.ID, false, &nick, &username)
	quickSendTextMessage(message.Chat.ID, fmt.Sprintf("üò¥ %v", nick))
	BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID))
}

func commandShowReg(message *tgbotapi.Message) {

	if !userIsAdmin(message.From) {
		return
	}

	// todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å

	// if len(usersWaitingToRegister) < 1 {
	// 	quickSendTextMessage(message.Chat.ID, "null")
	// 	return
	// }

	// var buttons [][]tgbotapi.InlineKeyboardButton
	// for username, nick := range usersWaitingToRegister {
	// 	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
	// 		tgbotapi.NewInlineKeyboardButtonData(
	// 			fmt.Sprintf("‚ùå %v", nick),
	// 			fmt.Sprintf("rmRegUser:%v", username),
	// 		),
	// 	))
	// }
	// buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
	// 	tgbotapi.NewInlineKeyboardButtonData("‚ùå", "close"),
	// ))

	// msg := tgbotapi.NewMessage(message.Chat.ID, "...")
	// msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	// if _, err := BOT.Send(msg); err != nil {
	// 	log.Panic(err)
	// }
	// BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID))
}

func commandRmUser(update *tgbotapi.Update) {

	if !userIsAdmin(update.Message.From) {
		return
	}
}

func commandShowMsgs(update *tgbotapi.Update) {

	if !userIsAdmin(update.Message.From) {
		return
	}
}
