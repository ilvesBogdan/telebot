package bot

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gitlab.com/_Bogdan/chat-gpt-telegram-bot/src/db"
)

func quickSendTextMessage(chatID int64, text string) (response tgbotapi.Message) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	response, err := BOT.Send(msg)
	if err != nil {
		log.Println(err)
	}
	return
}

func userIsAdmin(user *tgbotapi.User) bool {
	// todo –∑–∞–∫–æ–Ω—á–∏—Ç—å
	return true
}

func setExpectedMessageTypeForUser(typeMsg int, userID *int64) bool {
	return db.SetExpectedMessageType(typeMsg, userID)
}

func sendConfigContextMessage(message *tgbotapi.Message, context *db.Context) {
	text := setLanguage(message.From.LanguageCode)
	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf(
		text.msg("ContextCnfgMsg"), context.Name, context.GetDateStr()),
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(text.msg("Clear"), fmt.Sprintf("ctxCnfgClear:%v", context.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(text.msg("Rename"), fmt.Sprintf("ctxCnfgRename:%v", context.Id)),
			tgbotapi.NewInlineKeyboardButtonData(text.msg("Remove"), fmt.Sprintf("ctxCnfgRemove:%v", context.Id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			// todo –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–∫—Ä—ã—Ç—å", "close"),
		),
	)

	if _, err := BOT.Send(msg); err != nil {
		log.Println(err)
	}
}

func showMenuContexts(message *tgbotapi.Message) {

	contexts, err := db.GetContextsByTid(message.From.ID)
	if nil != err {
		log.Panic("–ù–µ—É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ –î–ë:", err)
	}

	if len(contexts) > 0 {
		var buttons [][]tgbotapi.KeyboardButton
		var btnText string

		for _, ct := range contexts {
			ct.TrimSpace()

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏–º
			if ct.Select {
				btnText = fmt.Sprintf("‚úÖ %v", ct.Name)
			} else {
				btnText = fmt.Sprintf("üí¨ %v", ct.Name)
			}

			buttons = append(buttons, tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton(btnText),
			))
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, "üìã")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
		if _, err := BOT.Send(msg); err != nil {
			log.Println(err)
		}
	} else {
		// todo –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		quickSendTextMessage(message.Chat.ID, "–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.")
	}
	BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID))
}

func hideMenuContexts(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üòé")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	res, err := BOT.Send(msg)
	if err != nil {
		log.Println(err)
	}
	BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID))
	BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, res.MessageID))
}

func writeMessageInDB(contextID int, messageText string) {
	err := db.SetNewMessage(contextID, messageText)
	if nil != err {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î, context id: '%v': %v", contextID, err)
		return
	}

	// todo: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 100, —Ç–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ.
}

func createNewContextAndSelect(contextName string, message *tgbotapi.Message) {
	response := db.SetNewContext(contextName, message.From.ID)
	// todo –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ
	quickSendTextMessage(message.Chat.ID, response)
}

func renameContext(message *tgbotapi.Message, contextID *int) {
	if db.RenameContextByID(contextID, &message.Text) {
		// todo –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
		quickSendTextMessage(message.Chat.ID, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!")
	}
}

func deleteThisMessage(message *tgbotapi.Message) {
	BOT.Send(tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID))
}

func checkNameContext(message *tgbotapi.Message) bool {
	if len([]rune(message.Text)) < 2 {
		// todo –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
		quickSendTextMessage(message.Chat.ID, "–ò–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤")
		return true
	}
	return false
}

func addWaitingUser(userID *int64, byPassword bool, userName, key *string) bool {
	return db.AddWaitingUser(userID, byPassword, userName, key)
}

func checkNewUserInWaiting(userName *string) (string, bool) {
	fstr := fmt.Sprintf("%v %v", *userName, strings.Repeat(" ", 199-len([]rune(*userName))))
	name := db.GetWaitingUser(&fstr, false)
	return name, len(name) > 0
}
